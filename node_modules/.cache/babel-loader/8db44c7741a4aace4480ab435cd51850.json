{"ast":null,"code":"const buildUrl = require('build-url');\n\nconst constant = require('./constant');\n\nconst util = require('./util');\n\nconst getLoginUrl = function (cas) {\n  let gateway = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  let baseUrl = _getCasBaseUrl(cas);\n\n  let queryParams = !util.isParamExistsInUrl(cas.redirectUrl, 'status') ? {\n    service: buildUrl(cas.redirectUrl, {\n      queryParams: {\n        status: constant.CAS_STATUS_IN_PROCESS\n      }\n    })\n  } : {\n    service: buildUrl(cas.redirectUrl)\n  };\n\n  if (gateway) {\n    queryParams.gateway = true;\n  }\n\n  switch (cas.version) {\n    case constant.CAS_VERSION_2_0:\n    case constant.CAS_VERSION_3_0:\n      return buildUrl(baseUrl, {\n        path: 'login',\n        queryParams: queryParams\n      });\n\n    default:\n      throw util.throwError('Unsupported CAS Version');\n  }\n};\n\nconst getLogoutUrl = function (cas) {\n  let redirectPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  let baseUrl = _getCasBaseUrl(cas);\n\n  let redirectUrl = buildUrl(window.location.origin, {\n    path: redirectPath\n  });\n  let queryParams = {};\n\n  switch (cas.version) {\n    case constant.CAS_VERSION_2_0:\n      if (!util.isEmpty(redirectPath)) {\n        queryParams = {\n          url: redirectUrl\n        };\n      }\n\n      break;\n\n    case constant.CAS_VERSION_3_0:\n      if (!util.isEmpty(redirectPath)) {\n        queryParams = {\n          service: redirectUrl\n        };\n      }\n\n      break;\n\n    default:\n      throw util.throwError('Unsupported CAS Version');\n  }\n\n  let params = {\n    path: 'logout'\n  };\n\n  if (Object.keys(queryParams).length !== 0) {\n    params.queryParams = queryParams;\n  }\n\n  return buildUrl(baseUrl, params);\n};\n\nconst getValidateUrl = (cas, ticket) => {\n  let baseUrl = _getCasBaseUrl(cas, true);\n\n  let queryParams = {\n    service: cas.redirectUrl,\n    ticket: ticket\n  };\n  let path = '';\n\n  switch (cas.version) {\n    case constant.CAS_VERSION_2_0:\n      path = 'serviceValidate';\n      break;\n\n    case constant.CAS_VERSION_3_0:\n      path = 'p3/serviceValidate';\n      queryParams.format = 'json';\n      break;\n\n    default:\n      throw util.throwError('Unsupported CAS Version');\n  }\n\n  if (!util.isEmpty(cas.proxy_callback_url)) {\n    queryParams.pgtUrl = cas.proxy_callback_url;\n  }\n\n  return buildUrl(baseUrl, {\n    path: path,\n    queryParams: queryParams\n  });\n};\n\nconst _getCasBaseUrl = function (cas) {\n  let withProxyIfExists = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (withProxyIfExists && cas.validation_proxy) {\n    const protocol = !util.isEmpty(cas.validation_proxy_protocol) ? util.getFullProtocol(cas.validation_proxy_protocol) : util.getFullProtocol(window.location.protocol);\n    window.location.origin.replace(/(^\\w+:|^)\\/\\//, '');\n    const endpoint = !util.isEmpty(cas.validation_proxy_endpoint) ? cas.validation_proxy_endpoint : window.location.origin.replace(/(^\\w+:|^)\\/\\//, '');\n    return protocol + endpoint + cas.validation_proxy_path;\n  } else {\n    return util.getFullProtocol(cas.protocol) + cas.endpoint + cas.path;\n  }\n};\n\nexport { getLoginUrl, getLogoutUrl, getValidateUrl };","map":{"version":3,"sources":["C:/Users/joshu/Capstone/Capstone-2/node_modules/react-cas-client/lib/url.js"],"names":["buildUrl","require","constant","util","getLoginUrl","cas","gateway","baseUrl","_getCasBaseUrl","queryParams","isParamExistsInUrl","redirectUrl","service","status","CAS_STATUS_IN_PROCESS","version","CAS_VERSION_2_0","CAS_VERSION_3_0","path","throwError","getLogoutUrl","redirectPath","window","location","origin","isEmpty","url","params","Object","keys","length","getValidateUrl","ticket","format","proxy_callback_url","pgtUrl","withProxyIfExists","validation_proxy","protocol","validation_proxy_protocol","getFullProtocol","replace","endpoint","validation_proxy_endpoint","validation_proxy_path"],"mappings":"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","sourcesContent":["const buildUrl = require('build-url');\n\nconst constant = require('./constant');\n\nconst util = require('./util');\n\nconst getLoginUrl = (cas, gateway = false) => {\n  let baseUrl = _getCasBaseUrl(cas);\n\n  let queryParams = !util.isParamExistsInUrl(cas.redirectUrl, 'status') ? {\n    service: buildUrl(cas.redirectUrl, {\n      queryParams: {\n        status: constant.CAS_STATUS_IN_PROCESS\n      }\n    })\n  } : {\n    service: buildUrl(cas.redirectUrl)\n  };\n\n  if (gateway) {\n    queryParams.gateway = true;\n  }\n\n  switch (cas.version) {\n    case constant.CAS_VERSION_2_0:\n    case constant.CAS_VERSION_3_0:\n      return buildUrl(baseUrl, {\n        path: 'login',\n        queryParams: queryParams\n      });\n\n    default:\n      throw util.throwError('Unsupported CAS Version');\n  }\n};\n\nconst getLogoutUrl = (cas, redirectPath = '') => {\n  let baseUrl = _getCasBaseUrl(cas);\n\n  let redirectUrl = buildUrl(window.location.origin, {\n    path: redirectPath\n  });\n  let queryParams = {};\n\n  switch (cas.version) {\n    case constant.CAS_VERSION_2_0:\n      if (!util.isEmpty(redirectPath)) {\n        queryParams = {\n          url: redirectUrl\n        };\n      }\n\n      break;\n\n    case constant.CAS_VERSION_3_0:\n      if (!util.isEmpty(redirectPath)) {\n        queryParams = {\n          service: redirectUrl\n        };\n      }\n\n      break;\n\n    default:\n      throw util.throwError('Unsupported CAS Version');\n  }\n\n  let params = {\n    path: 'logout'\n  };\n\n  if (Object.keys(queryParams).length !== 0) {\n    params.queryParams = queryParams;\n  }\n\n  return buildUrl(baseUrl, params);\n};\n\nconst getValidateUrl = (cas, ticket) => {\n  let baseUrl = _getCasBaseUrl(cas, true);\n\n  let queryParams = {\n    service: cas.redirectUrl,\n    ticket: ticket\n  };\n  let path = '';\n\n  switch (cas.version) {\n    case constant.CAS_VERSION_2_0:\n      path = 'serviceValidate';\n      break;\n\n    case constant.CAS_VERSION_3_0:\n      path = 'p3/serviceValidate';\n      queryParams.format = 'json';\n      break;\n\n    default:\n      throw util.throwError('Unsupported CAS Version');\n  }\n\n  if (!util.isEmpty(cas.proxy_callback_url)) {\n    queryParams.pgtUrl = cas.proxy_callback_url;\n  }\n\n  return buildUrl(baseUrl, {\n    path: path,\n    queryParams: queryParams\n  });\n};\n\nconst _getCasBaseUrl = (cas, withProxyIfExists = false) => {\n  if (withProxyIfExists && cas.validation_proxy) {\n    const protocol = !util.isEmpty(cas.validation_proxy_protocol) ? util.getFullProtocol(cas.validation_proxy_protocol) : util.getFullProtocol(window.location.protocol);\n    window.location.origin.replace(/(^\\w+:|^)\\/\\//, '');\n    const endpoint = !util.isEmpty(cas.validation_proxy_endpoint) ? cas.validation_proxy_endpoint : window.location.origin.replace(/(^\\w+:|^)\\/\\//, '');\n    return protocol + endpoint + cas.validation_proxy_path;\n  } else {\n    return util.getFullProtocol(cas.protocol) + cas.endpoint + cas.path;\n  }\n};\n\nexport { getLoginUrl, getLogoutUrl, getValidateUrl };"]},"metadata":{},"sourceType":"module"}