{"ast":null,"code":"/**\n * Central Authentication Service (CAS) client for express\n *\n * The Central Authentication Service (CAS) is a single-sign-on / single-sign-off protocol for the web. \n * It permits a user to access multiple applications while providing their \n * credentials (such as userid and password) only once to a central CAS Server application.\n *\n * @see https://apereo.github.io/cas/5.3.x/protocol/CAS-Protocol-Specification.html\n * \n * @author  Yang,junlong at 2018-11-25 14:00:59 build.\n * @version $Id$\n */\nvar https = require('https');\n\nvar http = require('http');\n\nvar path = require('path');\n\nvar url = require('url');\n\nvar parseXML = require('xml2js').parseString;\n\nvar XMLprocessors = require('xml2js/lib/processors');\n\nvar querystring = require('querystring'); // credential requestor / acceptor\n\n\nconst LOGIN_URI = '/login'; //   destroy CAS session (logout)\n\nconst LOGOUT_URI = '/logout'; // service ticket validation\n\nconst VALIDATE_URI = '/validate'; // service ticket validation [CAS 2.0]\n\nconst SERVICE_VALIDATE_URI = '/serviceValidate'; // service/proxy ticket validation [CAS 2.0]\n\nconst PROXY_VALIDATE_URI = '/proxyValidate'; // proxy ticket service [CAS 2.0]\n\nconst PROXY_URI = '/proxy'; // service ticket validation [CAS 3.0]\n\nconst P3_SERVICE_VALIDATE_URI = '/p3/serviceValidate'; // service/proxy ticket validation [CAS 3.0]\n\nconst P3_PROXY_VALIDATE_URI = '/p3/proxyValidate'; // Secure Access Markup Language\n\nconst SAML_VALIDATE_URI = '/samlValidate';\n/**\n * Node Cas Client\n *\n * @see https://github.com/apereo/java-cas-client\n * \n * @param {Object} options\n */\n\nfunction CASClient(options) {\n  /**\n   * The start of the CAS server URL, \n   * i.e. https://localhost:8443/cas\n   * \n   * @type {String}\n   */\n  this.casServerUrlPrefix = '';\n  /**\n   * Defines the location of the CAS server login URL, \n   * i.e. https://localhost:8443/cas/login. \n   * This overrides casServerUrlPrefix, if set.\n   * \n   * @type {String}\n   */\n\n  this.casServerLoginUrl = '';\n  /**\n   * The name of the server this application is hosted on. \n   * Service URL will be dynamically constructed using this, \n   * i.e. https://localhost:8443 \n   * (you must include the protocol, but port is optional if it's a standard port).\n   * \n   * @type {String}\n   */\n\n  this.serverName = '';\n  /**\n   * The service URL to send to the CAS server, \n   * i.e. https://localhost:8443/yourwebapp/index.html\n   * \n   * @type {String}\n   */\n\n  this.service = '';\n  /**\n   * specifies whether renew=true should be sent to the CAS server. \n   * Valid values are either true/false (or no value at all). \n   * \n   * @type {Boolean}\n   */\n\n  this.renew = false;\n  /**\n   * specifies whether gateway=true should be sent to the CAS server. \n   * Valid values are either true/false (or no value at all)\n   * \n   * @type {Boolean}\n   */\n\n  this.gateway = false;\n  /**\n   * Whether the client should auto encode the service url. \n   * Defaults to true\n   * \n   * @type {Boolean}\n   */\n\n  this.encodeServiceUrl = true;\n  /**\n   * cas session user name\n   * \n   * @type {String}\n   */\n\n  this.sessionName = 'cas_username';\n  /**\n   * cas session info name\n   * \n   * @type {String}\n   */\n\n  this.sessionInfo = 'cas_userinfo';\n  /**\n   * If dev mode is active, \n   * set the CAS user to the specified dev user.\n   * \n   * @type {String}\n   */\n\n  this.devModeUser = '';\n  /**\n   * If dev mode is active, \n   * set the CAS Info to the specified dev info.\n   * \n   * @type {String}\n   */\n\n  this.devModeInfo = {};\n  /**\n   * Destroy the entire session if the option is set.\n   * \n   * @type {Boolean}\n   */\n\n  this.isDestroySession = false;\n  /**\n   * The CAS Server Supported version\n   *\n   * i.e. '1.0', 2.0', '3.0', 'saml1.1'\n   * \n   * @type {String}\n   */\n\n  this.version = '3.0';\n  /**\n   * Supported values are XML and JSON\n   * Default value: JSON\n   * \n   * @type {String}\n   */\n  // this.format = 'JSON';\n\n  Object.assign(this, options);\n\n  if (!(this.casServerUrlPrefix || this.casServerLoginUrl)) {\n    throw new Error('The parameters casServerUrlPrefix and casServerLoginUrl need to be set at least one');\n  }\n\n  if (!this.serverName) {\n    throw new Error('Requires a serverName parameter.');\n  }\n\n  this.casServerUrlPrefix = this.casServerUrlPrefix || path.dirname(this.casServerLoginUrl);\n  this.casServerLoginUri = this.casServerLoginUrl ? path.basename(this.casServerLoginUrl) : LOGIN_URI;\n  var casServerParts = url.parse(this.casServerUrlPrefix); // cas server protocal\n\n  this.casServerProtocol = casServerParts.protocol;\n  this.casServerHost = casServerParts.host;\n  this.casServerPort = casServerParts.port;\n  this.casServerPath = casServerParts.path; // default cas server validate uri\n\n  this.casServerValidateUri = P3_SERVICE_VALIDATE_URI;\n  this.request = this.casServerProtocol == 'http' ? http.request : https.request; // format 2.0, 3.0 validate response\n\n  this._formatValidateResponse = function (body, callback) {\n    parseXML(body, {\n      trim: true,\n      normalize: true,\n      explicitArray: false,\n      tagNameProcessors: [XMLprocessors.stripPrefix],\n      valueProcessors: [function (value) {\n        return decodeURIComponent(value);\n      }]\n    }, function (error, result) {\n      if (error) {\n        return callback(new Error('Response from CAS server was bad.'));\n      }\n\n      try {\n        var failure = result.serviceResponse.authenticationFailure;\n\n        if (failure) {\n          return callback(new Error('CAS authentication failed (' + failure.$.code + ').'));\n        }\n\n        var success = result.serviceResponse.authenticationSuccess;\n\n        if (success) {\n          return callback(null, success.user, success.attributes);\n        } else {\n          return callback(new Error('CAS authentication failed.'));\n        }\n      } catch (err) {\n        console.log(err);\n        return callback(new Error('CAS authentication failed.'));\n      }\n    });\n  };\n\n  switch (this.version) {\n    case '1.0':\n      this.casServerValidateUri = VALIDATE_URI;\n\n      this._formatValidateResponse = function (body, callback) {\n        var lines = body.split('\\n');\n\n        if (lines[0] === 'yes' && lines.length >= 2) {\n          // success\n          return callback(null, lines[1]);\n        } else if (lines[0] === 'no') {\n          // failed\n          return callback(new Error('CAS authentication failed.'));\n        } else {\n          return callback(new Error('Response from CAS server was bad.'));\n        }\n      };\n\n      break;\n\n    case '2.0':\n      this.casServerValidateUri = SERVICE_VALIDATE_URI;\n      break;\n\n    case '3.0':\n      // todo nothing\n      break;\n\n    case 'saml1.1':\n      this.casServerValidateUri = SAML_VALIDATE_URI;\n\n      this._formatValidateResponse = function (body, callback) {\n        parseXML(body, {\n          trim: true,\n          normalize: true,\n          explicitArray: false,\n          tagNameProcessors: [XMLprocessors.normalize, XMLprocessors.stripPrefix],\n          valueProcessors: [function (value) {\n            return decodeURIComponent(value);\n          }]\n        }, function (error, result) {\n          if (error) {\n            return callback(new Error('Response from CAS server was bad.'));\n          }\n\n          try {\n            var samlResponse = result.envelope.body.response;\n            var success = samlResponse.status.statuscode.$.Value.split(':')[1];\n\n            if (success !== 'Success') {\n              return callback(new Error('CAS authentication failed (' + success + ').'));\n            } else {\n              var attributes = {};\n              var attributesArray = samlResponse.assertion.attributestatement.attribute;\n\n              if (!(attributesArray instanceof Array)) {\n                attributesArray = [attributesArray];\n              }\n\n              attributesArray.forEach(function (attr) {\n                var thisAttrValue;\n\n                if (attr.attributevalue instanceof Array) {\n                  thisAttrValue = [];\n                  attr.attributevalue.forEach(function (v) {\n                    thisAttrValue.push(v._);\n                  });\n                } else {\n                  thisAttrValue = attr.attributevalue._;\n                }\n\n                attributes[attr.$.AttributeName] = thisAttrValue;\n              });\n              return callback(null, samlResponse.assertion.authenticationstatement.subject.nameidentifier, attributes);\n            }\n          } catch (err) {\n            console.log(err);\n            return callback(new Error('CAS authentication failed.'));\n          }\n        });\n      };\n\n      break;\n\n    default: // defaults 3.0 version\n\n  }\n\n  this.check = this.check.bind(this);\n  this.block = this.block.bind(this);\n  this.bounce = this.bounce.bind(this);\n  this.logout = this.logout.bind(this);\n  this.redirect = this.redirect.bind(this);\n}\n/**\n * Bounces a request with CAS authentication. \n * If the user's session is not already validated with CAS, \n * their request will be redirected to the CAS login page.\n * \n * @param  {Object}   req  \n * @param  {Object}   res  \n * @param  {Function} next\n * @return {Undefined}       \n */\n\n\nCASClient.prototype.bounce = function (req, res, next) {\n  this._handle(req, res, next, 1);\n};\n/**\n * Redirect a request with CAS authentication.\n * If the user's session is not already validated with CAS, \n * their request will be redirected to the CAS login page.\n * \n * @param  {[type]}   req  \n * @param  {[type]}   res  \n * @param  {Function} next \n * @return {[type]}       \n */\n\n\nCASClient.prototype.redirect = function (req, res, next) {\n  this._handle(req, res, next, 2);\n};\n/**\n * Blocks a request with CAS authentication. \n * If the user's session is not already validated with CAS, \n * they will receive a 401 response.\n * \n * @param  {[type]}   req  \n * @param  {[type]}   res  \n * @param  {Function} next \n * @return {}       \n */\n\n\nCASClient.prototype.block = function (req, res, next) {\n  this._handle(req, res, next, 3);\n};\n/**\n * Checks a request with CAS authentication.\n * If the user's session is not already validated with CAS, \n * return false, otherwise return cas username\n * \n * @param  {[type]}   req  \n * @param  {[type]}   res  \n * @param  {Function} next \n * @return {}       \n */\n\n\nCASClient.prototype.check = function (req, res, next) {\n  return req.session[this.sessionName];\n};\n/**\n * Logout the currently logged in CAS user.\n * \n * @param  {Object}   req  \n * @param  {Object}   res  \n * @param  {Function} next \n * @return {}        \n */\n\n\nCASClient.prototype.logout = function (req, res, next) {\n  var query = {\n    service: this.service || url.resolve(this.serverName, url.parse(req.query.service || '/').pathname)\n  };\n\n  if (this.isDestroySession) {\n    req.session.destroy(function (err) {\n      if (err) {\n        console.log(err);\n      }\n    });\n  } else {\n    // Otherwise, just destroy the CAS session variables.\n    req.session && delete req.session[this.sessionName];\n\n    if (this.sessionInfo && req.session) {\n      delete req.session[this.sessionInfo];\n    }\n  } // Redirect the client to the CAS logout.\n\n\n  res.redirect(url.format({\n    protocol: this.casServerProtocol,\n    hostname: this.casServerHost,\n    pathname: url.resolve(this.casServerPath, LOGOUT_URI),\n    query: query\n  }));\n};\n\nCASClient.prototype._handle = function (req, res, next, authType) {\n  // If the session has been validated with CAS, no action is required.\n  if (this.check(req, res, next)) {\n    // If this is a bounce redirect, redirect the authenticated user.\n    if (authType === 2) {\n      res.redirect(req.session.cas_referer);\n    } else {\n      // Otherwise, allow them through to their request.\n      next();\n    }\n  } else if (this.devModeUser) {\n    req.session[this.sessionName] = this.devModeUser;\n    req.session[this.sessionInfo] = this.devModeInfo;\n    next();\n  } else if (authType === 3) {\n    // If the authentication type is BLOCK, simply send a 401 response.\n    res.sendStatus(401);\n  } else if (req.query && req.query.ticket) {\n    // If there is a CAS ticket in the query string, validate it with the CAS server.\n    this._validate(req, res, next);\n  } else {\n    // Otherwise, redirect the user to the CAS login.\n    this._login(req, res, next);\n  }\n};\n/**\n * Redirects the client to the CAS login page.\n * \n * @param  {Object}   req  \n * @param  {Object}   res  \n * @param  {Function} next \n * @return {}        \n */\n\n\nCASClient.prototype._login = function (req, res, next) {\n  // Save the return URL in the session. If an explicit return URL is set as a\n  // query parameter, use that. Otherwise, just use the URL from the request.\n  req.session.cas_referer = req.query.referer || url.parse(req._parsedOriginalUrl || req.url).path; // Set up the query parameters.\n\n  var query = {\n    service: this.service || url.resolve(this.serverName, url.parse(req._parsedOriginalUrl || req.url).pathname),\n    renew: this.renew\n  };\n\n  if (this.encodeServiceUrl) {\n    query.service = encodeURI(query.service);\n  }\n\n  res.redirect(url.format({\n    protocol: this.casServerProtocol,\n    hostname: this.casServerHost,\n    pathname: url.resolve(this.casServerPath, LOGIN_URI),\n    query: query\n  }));\n};\n/**\n * Checks the validity of a service ticket \n * and returns an XML/JSON-fragment response\n * \n * @param  {Object}   req  \n * @param  {Object}   res  \n * @param  {Function} next \n * @return {[type]}        \n */\n\n\nCASClient.prototype._validate = function (req, res, next) {\n  var query = {\n    service: this.service || url.resolve(this.serverName, url.parse(req._parsedOriginalUrl || req.url).pathname),\n    ticket: req.query.ticket\n  };\n  var requestOptions = {\n    host: this.casServerHost,\n    port: this.casServerPort\n  };\n  requestOptions.path = url.format({\n    pathname: url.resolve(this.casServerPath, this.casServerValidateUri),\n    query: query\n  });\n  var postData = querystring.stringify(query);\n\n  switch (this.version) {\n    case '1.0':\n      break;\n\n    case '2.0':\n      break;\n\n    case 'saml1.1':\n      var now = new Date();\n      postData = ['<?xml version=\"1.0\" encoding=\"utf-8\"?>', '<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">', '  <SOAP-ENV:Header/>', '  <SOAP-ENV:Body>', '    <samlp:Request xmlns:samlp=\"urn:oasis:names:tc:SAML:1.0:protocol\" MajorVersion=\"1\"', '      MinorVersion=\"1\" RequestID=\"_' + req.host + '.' + now.getTime() + '\"', '      IssueInstant=\"' + now.toISOString() + '\">', '      <samlp:AssertionArtifact>', '        ' + req.query.ticket, '      </samlp:AssertionArtifact>', '    </samlp:Request>', '  </SOAP-ENV:Body>', '</SOAP-ENV:Envelope>'].join('\\n');\n      requestOptions.method = 'POST';\n      requestOptions.path = url.format({\n        pathname: url.resolve(this.casServerPath, this.casServerValidateUri),\n        query: {\n          TARGET: query.service,\n          ticket: ''\n        }\n      });\n      requestOptions.headers = {\n        'Content-Type': 'text/xml',\n        'Content-Length': Buffer.byteLength(postData)\n      };\n      break;\n\n    default: // defaults 3.0 version\n\n  }\n\n  var request = this.request(requestOptions, response => {\n    response.setEncoding('utf8');\n    var body = '';\n    response.on('data', chunk => {\n      body += chunk;\n    });\n    response.on('end', () => {\n      // request callback\n      //req.session[ this.sessionName ] = 'test';\n      this._formatValidateResponse(body, (error, user, attributes) => {\n        if (error) {\n          console.log(error);\n          res.sendStatus(401);\n        } else {\n          req.session[this.sessionName] = user;\n\n          if (this.sessionInfo) {\n            req.session[this.sessionInfo] = attributes || {};\n          }\n\n          res.redirect(req.session.cas_referer);\n        }\n      });\n    });\n    response.on('error', function (err) {\n      console.log('Response error from CAS: ', err);\n      res.sendStatus(401);\n    });\n  });\n  request.on('error', error => {\n    console.log('Request error with CAS: ', error);\n    res.sendStatus(401);\n  }); // write data to request body\n\n  request.write(postData);\n  request.end();\n};\n\nmodule.exports = CASClient;","map":{"version":3,"sources":["C:/Users/joshu/Capstone/Capstone-2/node_modules/express-cas/index.js"],"names":["https","require","http","path","url","parseXML","parseString","XMLprocessors","querystring","LOGIN_URI","LOGOUT_URI","VALIDATE_URI","SERVICE_VALIDATE_URI","PROXY_VALIDATE_URI","PROXY_URI","P3_SERVICE_VALIDATE_URI","P3_PROXY_VALIDATE_URI","SAML_VALIDATE_URI","CASClient","options","casServerUrlPrefix","casServerLoginUrl","serverName","service","renew","gateway","encodeServiceUrl","sessionName","sessionInfo","devModeUser","devModeInfo","isDestroySession","version","Object","assign","Error","dirname","casServerLoginUri","basename","casServerParts","parse","casServerProtocol","protocol","casServerHost","host","casServerPort","port","casServerPath","casServerValidateUri","request","_formatValidateResponse","body","callback","trim","normalize","explicitArray","tagNameProcessors","stripPrefix","valueProcessors","value","decodeURIComponent","error","result","failure","serviceResponse","authenticationFailure","$","code","success","authenticationSuccess","user","attributes","err","console","log","lines","split","length","samlResponse","envelope","response","status","statuscode","Value","attributesArray","assertion","attributestatement","attribute","Array","forEach","attr","thisAttrValue","attributevalue","v","push","_","AttributeName","authenticationstatement","subject","nameidentifier","check","bind","block","bounce","logout","redirect","prototype","req","res","next","_handle","session","query","resolve","pathname","destroy","format","hostname","authType","cas_referer","sendStatus","ticket","_validate","_login","referer","_parsedOriginalUrl","encodeURI","requestOptions","postData","stringify","now","Date","getTime","toISOString","join","method","TARGET","headers","Buffer","byteLength","setEncoding","on","chunk","write","end","module","exports"],"mappings":"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","sourcesContent":["/**\n * Central Authentication Service (CAS) client for express\n *\n * The Central Authentication Service (CAS) is a single-sign-on / single-sign-off protocol for the web. \n * It permits a user to access multiple applications while providing their \n * credentials (such as userid and password) only once to a central CAS Server application.\n *\n * @see https://apereo.github.io/cas/5.3.x/protocol/CAS-Protocol-Specification.html\n * \n * @author  Yang,junlong at 2018-11-25 14:00:59 build.\n * @version $Id$\n */\n\nvar https = require('https');\nvar http = require('http');\nvar path = require('path');\nvar url = require('url');\nvar parseXML = require('xml2js').parseString;\nvar XMLprocessors = require('xml2js/lib/processors');\n\nvar querystring = require('querystring');\n\n// credential requestor / acceptor\nconst LOGIN_URI = '/login';\n//   destroy CAS session (logout)\nconst LOGOUT_URI = '/logout';\n// service ticket validation\nconst VALIDATE_URI = '/validate';\n// service ticket validation [CAS 2.0]\nconst SERVICE_VALIDATE_URI = '/serviceValidate';\n// service/proxy ticket validation [CAS 2.0]\nconst PROXY_VALIDATE_URI = '/proxyValidate';\n// proxy ticket service [CAS 2.0]\nconst PROXY_URI = '/proxy';\n// service ticket validation [CAS 3.0]\nconst P3_SERVICE_VALIDATE_URI = '/p3/serviceValidate';\n// service/proxy ticket validation [CAS 3.0]\nconst P3_PROXY_VALIDATE_URI = '/p3/proxyValidate'\n// Secure Access Markup Language\nconst SAML_VALIDATE_URI = '/samlValidate';\n\n/**\n * Node Cas Client\n *\n * @see https://github.com/apereo/java-cas-client\n * \n * @param {Object} options\n */\nfunction CASClient(options) {\n  /**\n   * The start of the CAS server URL, \n   * i.e. https://localhost:8443/cas\n   * \n   * @type {String}\n   */\n  this.casServerUrlPrefix = '';\n\n  /**\n   * Defines the location of the CAS server login URL, \n   * i.e. https://localhost:8443/cas/login. \n   * This overrides casServerUrlPrefix, if set.\n   * \n   * @type {String}\n   */\n  this.casServerLoginUrl = '';\n\n  /**\n   * The name of the server this application is hosted on. \n   * Service URL will be dynamically constructed using this, \n   * i.e. https://localhost:8443 \n   * (you must include the protocol, but port is optional if it's a standard port).\n   * \n   * @type {String}\n   */\n  this.serverName = '';\n\n  /**\n   * The service URL to send to the CAS server, \n   * i.e. https://localhost:8443/yourwebapp/index.html\n   * \n   * @type {String}\n   */\n  this.service = '';\n\n  /**\n   * specifies whether renew=true should be sent to the CAS server. \n   * Valid values are either true/false (or no value at all). \n   * \n   * @type {Boolean}\n   */\n  this.renew = false;\n\n  /**\n   * specifies whether gateway=true should be sent to the CAS server. \n   * Valid values are either true/false (or no value at all)\n   * \n   * @type {Boolean}\n   */\n  this.gateway = false;\n\n  /**\n   * Whether the client should auto encode the service url. \n   * Defaults to true\n   * \n   * @type {Boolean}\n   */\n  this.encodeServiceUrl = true;\n\n  /**\n   * cas session user name\n   * \n   * @type {String}\n   */\n  this.sessionName = 'cas_username';\n\n  /**\n   * cas session info name\n   * \n   * @type {String}\n   */\n  this.sessionInfo = 'cas_userinfo';\n\n  /**\n   * If dev mode is active, \n   * set the CAS user to the specified dev user.\n   * \n   * @type {String}\n   */\n  this.devModeUser = '';\n\n  /**\n   * If dev mode is active, \n   * set the CAS Info to the specified dev info.\n   * \n   * @type {String}\n   */\n  this.devModeInfo = {};\n\n  /**\n   * Destroy the entire session if the option is set.\n   * \n   * @type {Boolean}\n   */\n  this.isDestroySession = false;\n\n  /**\n   * The CAS Server Supported version\n   *\n   * i.e. '1.0', 2.0', '3.0', 'saml1.1'\n   * \n   * @type {String}\n   */\n  this.version = '3.0';\n\n  /**\n   * Supported values are XML and JSON\n   * Default value: JSON\n   * \n   * @type {String}\n   */\n  // this.format = 'JSON';\n\n  Object.assign(this, options);\n\n  if(!(this.casServerUrlPrefix || this.casServerLoginUrl)) {\n    throw new Error( 'The parameters casServerUrlPrefix and casServerLoginUrl need to be set at least one');\n  }\n\n  if(!this.serverName) {\n    throw new Error( 'Requires a serverName parameter.');\n  }\n\n  this.casServerUrlPrefix = this.casServerUrlPrefix || path.dirname(this.casServerLoginUrl);\n  this.casServerLoginUri = this.casServerLoginUrl ? path.basename(this.casServerLoginUrl) : LOGIN_URI;\n\n  var casServerParts = url.parse(this.casServerUrlPrefix);\n\n  // cas server protocal\n  this.casServerProtocol = casServerParts.protocol;\n  this.casServerHost = casServerParts.host;\n  this.casServerPort = casServerParts.port;\n  this.casServerPath = casServerParts.path;\n\n  // default cas server validate uri\n  this.casServerValidateUri = P3_SERVICE_VALIDATE_URI;\n\n  this.request = this.casServerProtocol == 'http' ? http.request : https.request;\n\n  // format 2.0, 3.0 validate response\n  this._formatValidateResponse = function(body, callback) {\n    parseXML(body, {\n      trim: true,\n      normalize: true,\n      explicitArray: false,\n      tagNameProcessors: [XMLprocessors.stripPrefix],\n      valueProcessors: [function(value) {\n        return decodeURIComponent(value);\n      }]\n    }, function(error, result) {\n      if (error) {\n        return callback(new Error('Response from CAS server was bad.'));\n      }\n\n      try {\n        var failure = result.serviceResponse.authenticationFailure;\n        if (failure) {\n          return callback(new Error('CAS authentication failed (' + failure.$.code + ').'));\n        }\n        var success = result.serviceResponse.authenticationSuccess;\n        if (success) {\n          return callback(null, success.user, success.attributes);\n        } else {\n          return callback(new Error( 'CAS authentication failed.'));\n        }\n      } catch (err) {\n        console.log(err);\n        return callback(new Error('CAS authentication failed.'));\n      }\n    });\n  };\n\n  switch(this.version) {\n    case '1.0' :\n      this.casServerValidateUri = VALIDATE_URI;\n      this._formatValidateResponse = function(body, callback) {\n        var lines = body.split('\\n');\n        if(lines[ 0 ] === 'yes' && lines.length >= 2) {\n          // success\n          return callback(null, lines[1]);\n        } else if (lines[0] === 'no') {\n          // failed\n          return callback(new Error('CAS authentication failed.'));\n        } else {\n          return callback(new Error('Response from CAS server was bad.'));\n        }\n      };\n      break;\n    case '2.0' :\n      this.casServerValidateUri = SERVICE_VALIDATE_URI;\n      break;\n    case '3.0' :\n      // todo nothing\n      \n      break;\n    case 'saml1.1' :\n      this.casServerValidateUri = SAML_VALIDATE_URI;\n      this._formatValidateResponse = function(body, callback) {\n        parseXML(body, {\n          trim: true,\n          normalize: true,\n          explicitArray: false,\n          tagNameProcessors: [XMLprocessors.normalize, XMLprocessors.stripPrefix],\n          valueProcessors: [function(value) {\n            return decodeURIComponent(value);\n          }]\n        }, function(error, result) {\n          if (error) {\n            return callback(new Error('Response from CAS server was bad.'));\n          }\n\n          try {\n            var samlResponse = result.envelope.body.response;\n            var success = samlResponse.status.statuscode.$.Value.split(':')[ 1 ];\n            if (success !== 'Success') {\n              return callback(new Error('CAS authentication failed (' + success + ').'));\n            } else {\n              var attributes = {};\n              var attributesArray = samlResponse.assertion.attributestatement.attribute;\n              if (!(attributesArray instanceof Array)) {\n                attributesArray = [ attributesArray ];\n              }\n              attributesArray.forEach(function(attr){\n                var thisAttrValue;\n                if (attr.attributevalue instanceof Array){\n                  thisAttrValue = [];\n                  attr.attributevalue.forEach(function(v) {\n                    thisAttrValue.push(v._);\n                  });\n                } else {\n                  thisAttrValue = attr.attributevalue._;\n                }\n                attributes[ attr.$.AttributeName ] = thisAttrValue;\n              });\n              return callback(null, samlResponse.assertion.authenticationstatement.subject.nameidentifier, attributes);\n            }\n          } catch (err) {\n            console.log(err);\n            return callback(new Error('CAS authentication failed.'));\n          }\n        });\n      };\n      break;\n    default: // defaults 3.0 version\n\n  } \n\n  this.check = this.check.bind(this);\n  this.block = this.block.bind(this);\n  this.bounce = this.bounce.bind(this);\n  this.logout = this.logout.bind(this);\n  this.redirect = this.redirect.bind(this);\n}\n\n/**\n * Bounces a request with CAS authentication. \n * If the user's session is not already validated with CAS, \n * their request will be redirected to the CAS login page.\n * \n * @param  {Object}   req  \n * @param  {Object}   res  \n * @param  {Function} next\n * @return {Undefined}       \n */\nCASClient.prototype.bounce = function(req, res, next) {\n  this._handle(req, res, next, 1);\n};\n\n/**\n * Redirect a request with CAS authentication.\n * If the user's session is not already validated with CAS, \n * their request will be redirected to the CAS login page.\n * \n * @param  {[type]}   req  \n * @param  {[type]}   res  \n * @param  {Function} next \n * @return {[type]}       \n */\nCASClient.prototype.redirect = function(req, res, next) {\n  this._handle(req, res, next, 2);\n};\n\n/**\n * Blocks a request with CAS authentication. \n * If the user's session is not already validated with CAS, \n * they will receive a 401 response.\n * \n * @param  {[type]}   req  \n * @param  {[type]}   res  \n * @param  {Function} next \n * @return {}       \n */\nCASClient.prototype.block = function(req, res, next) {\n  this._handle(req, res, next, 3);\n};\n\n/**\n * Checks a request with CAS authentication.\n * If the user's session is not already validated with CAS, \n * return false, otherwise return cas username\n * \n * @param  {[type]}   req  \n * @param  {[type]}   res  \n * @param  {Function} next \n * @return {}       \n */\nCASClient.prototype.check = function(req, res, next) {\n  return req.session[ this.sessionName ];\n};\n\n\n/**\n * Logout the currently logged in CAS user.\n * \n * @param  {Object}   req  \n * @param  {Object}   res  \n * @param  {Function} next \n * @return {}        \n */\nCASClient.prototype.logout = function(req, res, next) {\n  var query = {\n    service: this.service || url.resolve(this.serverName, url.parse(req.query.service || '/').pathname),\n  };\n\n  if(this.isDestroySession) {\n    req.session.destroy(function(err) {\n      if(err) {\n        console.log(err);\n      }\n    });\n  } else { // Otherwise, just destroy the CAS session variables.\n    req.session && (delete req.session[ this.sessionName ]);\n    if (this.sessionInfo && req.session) {\n      delete req.session[ this.sessionInfo ];\n    }\n  }\n\n  // Redirect the client to the CAS logout.\n  res.redirect(url.format({\n    protocol: this.casServerProtocol,\n    hostname: this.casServerHost,\n    pathname: url.resolve(this.casServerPath, LOGOUT_URI),\n    query: query\n  }));\n}\n\nCASClient.prototype._handle = function(req, res, next, authType) {\n  // If the session has been validated with CAS, no action is required.\n  if(this.check(req, res, next)) {\n    // If this is a bounce redirect, redirect the authenticated user.\n    if (authType === 2) {\n      res.redirect(req.session.cas_referer);\n    } else {\n      // Otherwise, allow them through to their request.\n      next();\n    }\n  } else if(this.devModeUser) {\n    req.session[ this.sessionName ] = this.devModeUser;\n    req.session[ this.sessionInfo ] = this.devModeInfo;\n    next();\n  } else if (authType === 3) {\n    // If the authentication type is BLOCK, simply send a 401 response.\n    res.sendStatus(401);\n  } else if (req.query && req.query.ticket) {\n    // If there is a CAS ticket in the query string, validate it with the CAS server.\n    this._validate(req, res, next);\n  } else {\n    // Otherwise, redirect the user to the CAS login.\n    this._login(req, res, next);\n  }\n};\n\n/**\n * Redirects the client to the CAS login page.\n * \n * @param  {Object}   req  \n * @param  {Object}   res  \n * @param  {Function} next \n * @return {}        \n */\nCASClient.prototype._login = function(req, res, next) {\n  // Save the return URL in the session. If an explicit return URL is set as a\n  // query parameter, use that. Otherwise, just use the URL from the request.\n  req.session.cas_referer = req.query.referer || url.parse(req._parsedOriginalUrl || req.url).path;\n\n  // Set up the query parameters.\n  var query = {\n    service: this.service || url.resolve(this.serverName, url.parse(req._parsedOriginalUrl || req.url).pathname),\n    renew: this.renew\n  };\n\n  if(this.encodeServiceUrl) {\n    query.service = encodeURI(query.service);\n  }\n\n  res.redirect(url.format({\n    protocol: this.casServerProtocol,\n    hostname: this.casServerHost,\n    pathname: url.resolve(this.casServerPath, LOGIN_URI),\n    query: query\n  }));\n}\n\n/**\n * Checks the validity of a service ticket \n * and returns an XML/JSON-fragment response\n * \n * @param  {Object}   req  \n * @param  {Object}   res  \n * @param  {Function} next \n * @return {[type]}        \n */\nCASClient.prototype._validate = function(req, res, next) {\n  var query = {\n    service: this.service || url.resolve(this.serverName, url.parse(req._parsedOriginalUrl || req.url).pathname),\n    ticket: req.query.ticket\n  };\n\n  var requestOptions = {\n    host: this.casServerHost,\n    port: this.casServerPort\n  };\n\n  requestOptions.path = url.format({\n    pathname: url.resolve(this.casServerPath, this.casServerValidateUri),\n    query: query\n  });\n\n  var postData = querystring.stringify(query);\n\n  switch(this.version) {\n    case '1.0' :\n      \n      break;\n    case '2.0' :\n      \n      break;\n    case 'saml1.1' :\n      var now = new Date();\n      postData = [\n        '<?xml version=\"1.0\" encoding=\"utf-8\"?>',\n        '<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\">',\n        '  <SOAP-ENV:Header/>',\n        '  <SOAP-ENV:Body>',\n        '    <samlp:Request xmlns:samlp=\"urn:oasis:names:tc:SAML:1.0:protocol\" MajorVersion=\"1\"',\n        '      MinorVersion=\"1\" RequestID=\"_' + req.host + '.' + now.getTime() + '\"',\n        '      IssueInstant=\"' + now.toISOString() + '\">',\n        '      <samlp:AssertionArtifact>',\n        '        ' + req.query.ticket,\n        '      </samlp:AssertionArtifact>',\n        '    </samlp:Request>',\n        '  </SOAP-ENV:Body>',\n        '</SOAP-ENV:Envelope>'\n      ].join('\\n');\n\n      requestOptions.method = 'POST';\n      requestOptions.path = url.format({\n        pathname: url.resolve(this.casServerPath, this.casServerValidateUri),\n        query: {\n          TARGET : query.service,\n          ticket: ''\n        }\n      });\n\n      requestOptions.headers = {\n        'Content-Type': 'text/xml',\n        'Content-Length': Buffer.byteLength(postData)\n      };\n      break;\n    default: // defaults 3.0 version\n\n  }\n\n  var request = this.request(requestOptions, response => {\n    response.setEncoding('utf8');\n    var body = '';\n\n    response.on('data', chunk => {\n      body += chunk;\n    });\n\n    response.on('end', () => {\n      // request callback\n      //req.session[ this.sessionName ] = 'test';\n      this._formatValidateResponse(body, (error, user, attributes) => {\n        if(error) {\n          console.log(error);\n          res.sendStatus(401);\n        } else {\n          req.session[this.sessionName] = user;\n          if (this.sessionInfo) {\n            req.session[this.sessionInfo] = attributes || {};\n          }\n          res.redirect(req.session.cas_referer);\n        }\n      });\n    });\n    response.on('error', function(err) {\n      console.log('Response error from CAS: ', err);\n      res.sendStatus(401);\n    });\n  });\n\n  request.on('error', error => {\n    console.log('Request error with CAS: ', error);\n    res.sendStatus(401);\n  });\n\n  // write data to request body\n  request.write(postData);\n  request.end();\n};\n\nmodule.exports = CASClient;\n"]},"metadata":{},"sourceType":"script"}