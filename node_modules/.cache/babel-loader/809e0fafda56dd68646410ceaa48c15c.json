{"ast":null,"code":"const isEmpty = obj => {\n  return obj === undefined || obj === null || obj.toString().replace(/\\s/g, '') === '';\n};\n\nconst throwError = err => {\n  throw new Error('[CasClient]: ' + err);\n};\n\nconst getCurrentUrl = function () {\n  let withoutTicket = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  let url = window.location.href;\n\n  if (withoutTicket) {\n    return url.replace(/(^|[&?])ticket(=[^&]*)?/, '');\n  }\n\n  return url;\n};\n\nconst getParamFromCurrentUrl = param => {\n  return new URL(window.location.href).searchParams.get(param);\n};\n\nconst getFullProtocol = protocol => {\n  return ['http', 'http:'].includes(protocol) ? 'http://' : 'https://';\n};\n\nconst isParamExistsInUrl = (url, param) => {\n  const value = new URL(url).searchParams.get(param);\n  return value !== null;\n};\n\nexport { isEmpty, throwError, getCurrentUrl, getParamFromCurrentUrl, getFullProtocol, isParamExistsInUrl };","map":{"version":3,"sources":["C:/Users/joshu/Capstone/Capstone-2/node_modules/react-cas-client/lib/util.js"],"names":["isEmpty","obj","undefined","toString","replace","throwError","err","Error","getCurrentUrl","withoutTicket","url","window","location","href","getParamFromCurrentUrl","param","URL","searchParams","get","getFullProtocol","protocol","includes","isParamExistsInUrl","value"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,GAAG,IAAI;AACrB,SAAOA,GAAG,KAAKC,SAAR,IAAqBD,GAAG,KAAK,IAA7B,IAAqCA,GAAG,CAACE,QAAJ,GAAeC,OAAf,CAAuB,KAAvB,EAA8B,EAA9B,MAAsC,EAAlF;AACD,CAFD;;AAIA,MAAMC,UAAU,GAAGC,GAAG,IAAI;AACxB,QAAM,IAAIC,KAAJ,CAAU,kBAAkBD,GAA5B,CAAN;AACD,CAFD;;AAIA,MAAME,aAAa,GAAG,YAA0B;AAAA,MAAzBC,aAAyB,uEAAT,IAAS;AAC9C,MAAIC,GAAG,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAA1B;;AAEA,MAAIJ,aAAJ,EAAmB;AACjB,WAAOC,GAAG,CAACN,OAAJ,CAAY,yBAAZ,EAAuC,EAAvC,CAAP;AACD;;AAED,SAAOM,GAAP;AACD,CARD;;AAUA,MAAMI,sBAAsB,GAAGC,KAAK,IAAI;AACtC,SAAO,IAAIC,GAAJ,CAAQL,MAAM,CAACC,QAAP,CAAgBC,IAAxB,EAA8BI,YAA9B,CAA2CC,GAA3C,CAA+CH,KAA/C,CAAP;AACD,CAFD;;AAIA,MAAMI,eAAe,GAAGC,QAAQ,IAAI;AAClC,SAAO,CAAC,MAAD,EAAS,OAAT,EAAkBC,QAAlB,CAA2BD,QAA3B,IAAuC,SAAvC,GAAmD,UAA1D;AACD,CAFD;;AAIA,MAAME,kBAAkB,GAAG,CAACZ,GAAD,EAAMK,KAAN,KAAgB;AACzC,QAAMQ,KAAK,GAAG,IAAIP,GAAJ,CAAQN,GAAR,EAAaO,YAAb,CAA0BC,GAA1B,CAA8BH,KAA9B,CAAd;AACA,SAAOQ,KAAK,KAAK,IAAjB;AACD,CAHD;;AAKA,SAASvB,OAAT,EAAkBK,UAAlB,EAA8BG,aAA9B,EAA6CM,sBAA7C,EAAqEK,eAArE,EAAsFG,kBAAtF","sourcesContent":["const isEmpty = obj => {\n  return obj === undefined || obj === null || obj.toString().replace(/\\s/g, '') === '';\n};\n\nconst throwError = err => {\n  throw new Error('[CasClient]: ' + err);\n};\n\nconst getCurrentUrl = (withoutTicket = true) => {\n  let url = window.location.href;\n\n  if (withoutTicket) {\n    return url.replace(/(^|[&?])ticket(=[^&]*)?/, '');\n  }\n\n  return url;\n};\n\nconst getParamFromCurrentUrl = param => {\n  return new URL(window.location.href).searchParams.get(param);\n};\n\nconst getFullProtocol = protocol => {\n  return ['http', 'http:'].includes(protocol) ? 'http://' : 'https://';\n};\n\nconst isParamExistsInUrl = (url, param) => {\n  const value = new URL(url).searchParams.get(param);\n  return value !== null;\n};\n\nexport { isEmpty, throwError, getCurrentUrl, getParamFromCurrentUrl, getFullProtocol, isParamExistsInUrl };"]},"metadata":{},"sourceType":"module"}